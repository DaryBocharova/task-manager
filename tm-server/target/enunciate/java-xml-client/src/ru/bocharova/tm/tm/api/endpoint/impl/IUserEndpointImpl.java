/**
 * 
 *
 * Generated by <a href="http://enunciate.webcohesion.com">Enunciate</a>.
 */
package ru.bocharova.tm.tm.api.endpoint.impl;

import ru.bocharova.tm.tm.api.endpoint.IUserEndpoint;

/**
 * Implementation of the {@link IUserEndpoint}.
 */
public class IUserEndpointImpl implements IUserEndpoint {

  private final IUserEndpoint proxy;

  /**
   * Construct a IUserEndpoint that points to the endpoint at the specified host and port.
   *
   * @param host The host.
   * @param port The port.
   * @param features The features (e.g. MTOM).
   */
  public IUserEndpointImpl(String host, int port, javax.xml.ws.WebServiceFeature... features) {
    this.proxy = javax.xml.ws.spi.Provider.provider().createServiceDelegate(getClass().getResource("/ns3.wsdl"), new javax.xml.namespace.QName("http://endpoint.api.tm.tm.bocharova.ru/", "IUserEndpointService"), javax.xml.ws.Service.class).getPort(IUserEndpoint.class, features);
    try {
      java.net.URL baseUrl = new java.net.URL("http://localhost:8080/IUserEndpointService");
      _getBindingProvider().getRequestContext().put(javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY, new java.net.URL(baseUrl.getProtocol(), host, port, baseUrl.getFile()).toString());
    }
    catch (java.net.MalformedURLException e) {
      throw new IllegalStateException(e);
    }
  }

  /**
   * Construct a IUserEndpoint that points to the specified endpoint.
   *
   * @param endpoint The endpoint to point to.
   * @param features The features (e.g. MTOM).
   */
  public IUserEndpointImpl(String endpoint, javax.xml.ws.WebServiceFeature... features) {
    this.proxy = javax.xml.ws.spi.Provider.provider().createServiceDelegate(getClass().getResource("/ns3.wsdl"), new javax.xml.namespace.QName("http://endpoint.api.tm.tm.bocharova.ru/", "IUserEndpointService"), javax.xml.ws.Service.class).getPort(IUserEndpoint.class, features);
    _getBindingProvider().getRequestContext().put(javax.xml.ws.BindingProvider.ENDPOINT_ADDRESS_PROPERTY, endpoint);
  }

  /**
   * Get the binding provider supporting this service.
   */
  public javax.xml.ws.BindingProvider _getBindingProvider() {
    return (javax.xml.ws.BindingProvider) this.proxy;
  }


  // Inherited.
  public ru.bocharova.tm.entity.User createUser(ru.bocharova.tm.entity.Session session, java.lang.String login, java.lang.String password, java.lang.String role) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    return proxy.createUser(session, login, password, role); 
  }

  // Inherited.
  public ru.bocharova.tm.entity.User changeUserPassword(ru.bocharova.tm.entity.Session session, java.lang.String id, java.lang.String login, java.lang.String password, java.lang.String role) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    return proxy.changeUserPassword(session, id, login, password, role); 
  }

  // Inherited.
  public ru.bocharova.tm.entity.User editUserProfile(ru.bocharova.tm.entity.Session session, java.lang.String login, java.lang.String password) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    return proxy.editUserProfile(session, login, password); 
  }

  // Inherited.
  public ru.bocharova.tm.entity.User findUserByLogin(ru.bocharova.tm.entity.Session session, java.lang.String login) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    return proxy.findUserByLogin(session, login); 
  }

  // Inherited.
  public ru.bocharova.tm.entity.User getUserBySession(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    return proxy.getUserBySession(session); 
  }

  // Inherited.
  public java.util.Collection<ru.bocharova.tm.entity.User> findAllUser(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    return proxy.findAllUser(session); 
  }

  // Inherited.
  public void loadUserData(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.loadUserData(session); 
  }

  // Inherited.
  public void saveUserData(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.saveUserData(session); 
  }

  // Inherited.
  public void loadUserDataJaxbXml(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.loadUserDataJaxbXml(session); 
  }

  // Inherited.
  public void saveUserDataJaxbXml(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.saveUserDataJaxbXml(session); 
  }

  // Inherited.
  public void loadUserDataFasterXml(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.loadUserDataFasterXml(session); 
  }

  // Inherited.
  public void saveUserDataFasterXml(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.saveUserDataFasterXml(session); 
  }

  // Inherited.
  public void loadUserDataJaxbJSON(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.loadUserDataJaxbJSON(session); 
  }

  // Inherited.
  public void saveUserDataJaxbJSON(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.saveUserDataJaxbJSON(session); 
  }

  // Inherited.
  public void loadUserDataFasterJSON(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.loadUserDataFasterJSON(session); 
  }

  // Inherited.
  public void saveUserDataFasterJSON(ru.bocharova.tm.entity.Session session) throws ru.bocharova.tm.exception.AuthenticationSecurityException {
    proxy.saveUserDataFasterJSON(session); 
  }
}
